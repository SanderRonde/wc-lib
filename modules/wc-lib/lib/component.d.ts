import { Constructor, InferInstance, InferReturn, DefaultVal } from '../classes/types.js';
import { WebComponentBaseMixinInstance } from './base.js';
import { WebComponentListenableMixinInstance } from './listener.js';
import { WebComponentDefinerMixinInstance } from './definer.js';
import { ClassToObj } from './configurable.js';
import { CHANGE_TYPE } from './template-fn.js';
import { Props } from './props.js';
/**
 * Gets GA['selectors'] from the class generic type
 */
export declare type GetEls<GA extends {
    selectors?: SelectorMap;
}> = Required<GA>['selectors'] extends undefined ? {} : DefaultVal<Required<GA>['selectors'], SelectorMap>;
/**
 * The selector map type that is used to infer
 * typed HTML and typed CSS
 */
export interface SelectorMap {
    /**
     * All child elements of this component by ID
     */
    IDS?: {
        [key: string]: HTMLElement | SVGElement;
    };
    /**
     * All child elements of this component by class
     */
    CLASSES?: {
        [key: string]: HTMLElement | SVGElement;
    };
    /**
     * All child elements of this component by selector
     */
    SELECTORS?: {
        [key: string]: HTMLElement | SVGElement;
    };
    /**
     * All child elements of this component by tag name
     */
    TAGS?: {
        [key: string]: HTMLElement | SVGElement;
    };
    /**
     * Togglable classes that can be put onto other elements.
     * The string value is used as options for the toggles.
     * For example if the string value is 'a'|'b'
     * the suggestions will be 'a'|'b'
     */
    TOGGLES?: string;
    /**
     * Attributes that can be put onto other elements.
     * The string value is used as options for the toggles.
     * For example if the string value is 'a'|'b'
     * the suggestions will be 'a'|'b'
     */
    ATTRIBUTES?: string;
}
/**
 * An IDMap that is used as `component.$`
 */
export declare type IDMapFn<IDS extends SelectorMap> = {
    /**
     * Query this component's root for given selector
     */
    <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | undefined;
    <K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | undefined;
    <E extends HTMLElement = HTMLElement>(selector: string): E | undefined;
} & IDS['IDS'];
/**
 * Type of property change events that can be listened for
 */
export declare type PropChangeEvents = 'beforePropChange' | 'propChange';
/**
 * The parent/super type required by the `WebComponentMixin` mixin
 */
export declare type WebComponentSuper = Constructor<HTMLElement & Pick<WebComponentDefinerMixinInstance, '___definerClass'> & Pick<WebComponentBaseMixinInstance, 'root' | 'self' | 'renderToDOM'> & Pick<WebComponentListenableMixinInstance, 'listen'> & {
    connectedCallback(): void;
    disconnectedCallback?(): void;
}>;
/**
 * An instance of the webcomponent mixin class
 */
export declare type WebComponentMixinInstance = InferInstance<WebComponentMixinClass>;
/**
 * The webcomponent mixin class
 */
export declare type WebComponentMixinClass = InferReturn<typeof WebComponentMixin>;
/**
 * A standalone instance of the webcomponent class
 */
export declare class WebComponentTypeInstance<GA extends {
    selectors?: SelectorMap;
} = {}, E extends void = void, ELS extends SelectorMap = GetEls<GA>> {
    /**
     * An array of functions that get called when this
     * component gets unmounted. These will dispose
     * of any open listeners or similar garbage
     */
    disposables: (() => void)[];
    /**
     * Whether this component has been mounted
     */
    isMounted: boolean;
    /**
     * Whether this component is being server-side rendered
     */
    get isSSR(): boolean;
    /**
     * An object that contains all children
     * of this element mapped by their ID.
     * This object can also be called with a
     * query, which is just a proxy call to
     * `this.root.querySelector`.
     *
     * **Note:** This function returns `undefined`
     * 	when no element can be found instead of
     * 	null.
     *
     * @readonly
     */
    get $(): IDMapFn<ELS>;
    /**
     * Proxy for `this.root.querySelectorAll(selector)`
     *
     * @template E - An element
     * @param {string} selector - The query to use
     *
     * @returns {NodeListOf<HTMLElement|SVGElement|E>} A list of
     * 	nodes that are the result of this query
     */
    $$<K extends keyof ELS['SELECTORS']>(selector: K): ELS['SELECTORS'][K][];
    $$<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K][];
    $$<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K][];
    $$<E extends Element = Element>(selector: string): E[];
    $$(selector: string): HTMLElement[];
    /**
     * Called when the component is mounted to the dom.
     * Be sure to always call `super.connectedCallback()`
     * if you override this method
     */
    connectedCallback(): any;
    /**
     * Called when the component is unmounted from the dom
     * Be sure to always call `super.disconnectedCallback()`
     * 	if you override this method
     */
    disconnectedCallback(): any;
    /**
     * Called when the component is mounted to the dom for the first time.
     * This will be part of the "constructor" and will slow down the initial render
     */
    layoutMounted(): any;
    /**
     * Called when the component is mounted to the dom and is ready to be manipulated
     */
    mounted(): any;
    /**
     * Called when the component is removed from the dom
     */
    unmounted(): any;
    /**
     * Listeners for property change events on this node
     *
     * @template P - The properties of this node
     *
     * @param {PropChangeEvents} event - The type of change
     * 	to listen for. Either a `propChange` or a
     * 	`beforePropChange` event
     * @param {(key: keyof P, newValue: P[keyof P], oldValue: P[keyof P]) => void} listener - The
     * 	listener that should be called when the event is fired.
     * 	This listener is called with the name of the changed
     * 	property, the new value and the old value respectively
     * @param {boolean} [once] - Whether the listener should only
     * 	be called once
     */
    listenProp<P extends Props & {
        [key: string]: any;
    }>(event: PropChangeEvents, listener: (key: keyof P, newValue: P[keyof P], oldValue: P[keyof P]) => void, once?: boolean): void;
    listenProp<P extends Props & {
        [key: string]: any;
    }, PK extends keyof P>(event: PropChangeEvents, listener: (key: PK, newValue: P[PK], oldValue: P[PK]) => void, once?: boolean): void;
    listenProp<P extends Props & {
        [key: string]: any;
    }>(event: PropChangeEvents, listener: (key: keyof P, newValue: P[keyof P], oldValue: P[keyof P]) => void, once?: boolean): void;
}
/**
 * The static values of the webcomponent class
 */
export declare type WebComponentTypeStatic = ClassToObj<typeof WebComponentTypeInstance>;
/**
 * The class that wraps up all subclasses of a webcomponent.
 * This version takes two type parameters that allow for the
 * type parameters to be specified as well as the
 * ID map.
 *
 * @template ELS - The elements found in this component's HTML
 * @template E - An object map of events to its args and return value. See
 * 	`WebComponentListenable` for more info
 */
export declare const WebComponentMixin: <P extends Constructor<HTMLElement & Pick<WebComponentDefinerMixinInstance, "___definerClass"> & Pick<WebComponentBaseMixinInstance, "root" | "self" | "renderToDOM"> & Pick<WebComponentListenableMixinInstance, "listen"> & {
    connectedCallback(): void;
    disconnectedCallback?(): void;
}>>(superFn: P) => {
    new <GA extends {
        selectors?: SelectorMap | undefined;
    } = {}, _E extends void = void, ELS extends SelectorMap = GetEls<GA>>(...args: any[]): {
        disposables: (() => void)[];
        isMounted: boolean;
        readonly isSSR: boolean;
        readonly $: IDMapFn<ELS>;
        $$<K extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K): HTMLElementTagNameMap[K][];
        $$<K_2 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_2): SVGElementTagNameMap[K_2][];
        $$<E extends Element = Element>(selector: string): E[];
        connectedCallback(): void;
        disconnectedCallback(): void;
        layoutMounted(): void;
        mounted(): void;
        unmounted(): void;
        listenProp<P_1 extends Props<any> & {
            [key: string]: any;
        }>(event: PropChangeEvents, listener: (key: keyof P_1, newValue: P_1[keyof P_1], oldValue: P_1[keyof P_1]) => void, once?: boolean | undefined): void;
        listenProp<P_2 extends Props<any> & {
            [key: string]: any;
        }, PK extends keyof P_2>(event: PropChangeEvents, listener: (key: PK, newValue: P_2[PK], oldValue: P_2[PK]) => void, once?: boolean | undefined): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element | null;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        click(): void;
        addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
        removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
        readonly assignedSlot: HTMLSlotElement | null;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string | null;
        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly prefix: string | null;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot | null;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
        closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
        closest<E_2 extends Element = Element>(selector: string): E_2 | null;
        getAttribute(qualifiedName: string): string | null;
        getAttributeNS(namespace: string | null, localName: string): string | null;
        getAttributeNames(): string[];
        getAttributeNode(name: string): Attr | null;
        getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
        getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string | null, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
        insertAdjacentHTML(where: InsertPosition, html: string): void;
        insertAdjacentText(where: InsertPosition, text: string): void;
        matches(selectors: string): boolean;
        msGetRegionContent(): any;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string | null, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions | undefined): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions | undefined): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
        scrollTo(options?: ScrollToOptions | undefined): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr | null;
        setAttributeNodeNS(attr: Attr): Attr | null;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode | null;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode | null;
        readonly nextSibling: ChildNode | null;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string | null;
        readonly parentElement: HTMLElement | null;
        readonly parentNode: (Node & ParentNode) | null;
        readonly previousSibling: ChildNode | null;
        textContent: string | null;
        appendChild<T extends Node>(newChild: T): T;
        cloneNode(deep?: boolean | undefined): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node | null): boolean;
        getRootNode(options?: GetRootNodeOptions | undefined): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
        isDefaultNamespace(namespace: string | null): boolean;
        isEqualNode(otherNode: Node | null): boolean;
        isSameNode(otherNode: Node | null): boolean;
        lookupNamespaceURI(prefix: string | null): string | null;
        lookupPrefix(namespace: string | null): string | null;
        normalize(): void;
        removeChild<T_2 extends Node>(oldChild: T_2): T_2;
        replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
        getAnimations(): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element | null;
        readonly previousElementSibling: Element | null;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element | null;
        readonly lastElementChild: Element | null;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
        querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
        querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
        querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
        querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
        querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
        oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
        oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
        onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onerror: OnErrorEventHandler;
        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string | undefined;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions | undefined): void;
        ___definerClass: import("./definer.js").DefinerClass;
        readonly root: import("./base.js").ExtendedShadowRoot;
        readonly self: {
            new (...args: any[]): {
                readonly self: any & Constructor<Pick<WebComponentDefinerMixinInstance, "___definerClass"> & HTMLElement> & Pick<{
                    new (...args: any[]): {
                        ___definerClass: import("./definer.js").DefinerClass;
                        accessKey: string;
                        readonly accessKeyLabel: string;
                        autocapitalize: string;
                        dir: string;
                        draggable: boolean;
                        hidden: boolean;
                        innerText: string;
                        lang: string;
                        readonly offsetHeight: number;
                        readonly offsetLeft: number;
                        readonly offsetParent: Element | null;
                        readonly offsetTop: number;
                        readonly offsetWidth: number;
                        spellcheck: boolean;
                        title: string;
                        translate: boolean;
                        click(): void;
                        addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
                        removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
                        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
                        readonly assignedSlot: HTMLSlotElement | null;
                        readonly attributes: NamedNodeMap;
                        readonly classList: DOMTokenList;
                        className: string;
                        readonly clientHeight: number;
                        readonly clientLeft: number;
                        readonly clientTop: number;
                        readonly clientWidth: number;
                        id: string;
                        readonly localName: string;
                        readonly namespaceURI: string | null;
                        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
                        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
                        outerHTML: string;
                        readonly ownerDocument: Document;
                        readonly prefix: string | null;
                        readonly scrollHeight: number;
                        scrollLeft: number;
                        scrollTop: number;
                        readonly scrollWidth: number;
                        readonly shadowRoot: ShadowRoot | null;
                        slot: string;
                        readonly tagName: string;
                        attachShadow(init: ShadowRootInit): ShadowRoot;
                        closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
                        closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
                        closest<E_2 extends Element = Element>(selector: string): E_2 | null;
                        getAttribute(qualifiedName: string): string | null;
                        getAttributeNS(namespace: string | null, localName: string): string | null;
                        getAttributeNames(): string[];
                        getAttributeNode(name: string): Attr | null;
                        getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
                        getBoundingClientRect(): DOMRect;
                        getClientRects(): DOMRectList;
                        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                        getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
                        getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
                        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                        getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
                        hasAttribute(qualifiedName: string): boolean;
                        hasAttributeNS(namespace: string | null, localName: string): boolean;
                        hasAttributes(): boolean;
                        hasPointerCapture(pointerId: number): boolean;
                        insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
                        insertAdjacentHTML(where: InsertPosition, html: string): void;
                        insertAdjacentText(where: InsertPosition, text: string): void;
                        matches(selectors: string): boolean;
                        msGetRegionContent(): any;
                        releasePointerCapture(pointerId: number): void;
                        removeAttribute(qualifiedName: string): void;
                        removeAttributeNS(namespace: string | null, localName: string): void;
                        removeAttributeNode(attr: Attr): Attr;
                        requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
                        requestPointerLock(): void;
                        scroll(options?: ScrollToOptions | undefined): void;
                        scroll(x: number, y: number): void;
                        scrollBy(options?: ScrollToOptions | undefined): void;
                        scrollBy(x: number, y: number): void;
                        scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
                        scrollTo(options?: ScrollToOptions | undefined): void;
                        scrollTo(x: number, y: number): void;
                        setAttribute(qualifiedName: string, value: string): void;
                        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
                        setAttributeNode(attr: Attr): Attr | null;
                        setAttributeNodeNS(attr: Attr): Attr | null;
                        setPointerCapture(pointerId: number): void;
                        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
                        webkitMatchesSelector(selectors: string): boolean;
                        readonly baseURI: string;
                        readonly childNodes: NodeListOf<ChildNode>;
                        readonly firstChild: ChildNode | null;
                        readonly isConnected: boolean;
                        readonly lastChild: ChildNode | null;
                        readonly nextSibling: ChildNode | null;
                        readonly nodeName: string;
                        readonly nodeType: number;
                        nodeValue: string | null;
                        readonly parentElement: HTMLElement | null;
                        readonly parentNode: (Node & ParentNode) | null;
                        readonly previousSibling: ChildNode | null;
                        textContent: string | null;
                        appendChild<T extends Node>(newChild: T): T;
                        cloneNode(deep?: boolean | undefined): Node;
                        compareDocumentPosition(other: Node): number;
                        contains(other: Node | null): boolean;
                        getRootNode(options?: GetRootNodeOptions | undefined): Node;
                        hasChildNodes(): boolean;
                        insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
                        isDefaultNamespace(namespace: string | null): boolean;
                        isEqualNode(otherNode: Node | null): boolean;
                        isSameNode(otherNode: Node | null): boolean;
                        lookupNamespaceURI(prefix: string | null): string | null;
                        lookupPrefix(namespace: string | null): string | null;
                        normalize(): void;
                        removeChild<T_2 extends Node>(oldChild: T_2): T_2;
                        replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
                        readonly ATTRIBUTE_NODE: number;
                        readonly CDATA_SECTION_NODE: number;
                        readonly COMMENT_NODE: number;
                        readonly DOCUMENT_FRAGMENT_NODE: number;
                        readonly DOCUMENT_NODE: number;
                        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                        readonly DOCUMENT_POSITION_CONTAINS: number;
                        readonly DOCUMENT_POSITION_DISCONNECTED: number;
                        readonly DOCUMENT_POSITION_FOLLOWING: number;
                        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                        readonly DOCUMENT_POSITION_PRECEDING: number;
                        readonly DOCUMENT_TYPE_NODE: number;
                        readonly ELEMENT_NODE: number;
                        readonly ENTITY_NODE: number;
                        readonly ENTITY_REFERENCE_NODE: number;
                        readonly NOTATION_NODE: number;
                        readonly PROCESSING_INSTRUCTION_NODE: number;
                        readonly TEXT_NODE: number;
                        dispatchEvent(event: Event): boolean;
                        animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
                        getAnimations(): Animation[];
                        after(...nodes: (string | Node)[]): void;
                        before(...nodes: (string | Node)[]): void;
                        remove(): void;
                        replaceWith(...nodes: (string | Node)[]): void;
                        innerHTML: string;
                        readonly nextElementSibling: Element | null;
                        readonly previousElementSibling: Element | null;
                        readonly childElementCount: number;
                        readonly children: HTMLCollection;
                        readonly firstElementChild: Element | null;
                        readonly lastElementChild: Element | null;
                        append(...nodes: (string | Node)[]): void;
                        prepend(...nodes: (string | Node)[]): void;
                        querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
                        querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
                        querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
                        querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
                        querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
                        querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
                        oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        readonly style: CSSStyleDeclaration;
                        contentEditable: string;
                        enterKeyHint: string;
                        inputMode: string;
                        readonly isContentEditable: boolean;
                        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onerror: OnErrorEventHandler;
                        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
                        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
                        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
                        autofocus: boolean;
                        readonly dataset: DOMStringMap;
                        nonce?: string | undefined;
                        tabIndex: number;
                        blur(): void;
                        focus(options?: FocusOptions | undefined): void;
                    };
                    dependencies?: {
                        define(isDevelopment?: boolean | undefined, isRoot?: boolean | undefined): void;
                    }[] | null | undefined;
                    is: string;
                    define(isDevelopment?: boolean, isRoot?: boolean): void;
                } & Constructor<HTMLElement>, "is" | "define">;
                __hasCustomCSS(): boolean;
                customCSS(): import("./template-fn.js").TemplateFnLike<number> | import("./template-fn.js").TemplateFnLike<number>[];
                readonly root: import("./base.js").ExtendedShadowRoot;
                props: any;
                readonly jsxProps: import("../classes/types.js").JSXDefinition<any, {}>;
                renderToDOM(change?: CHANGE_TYPE): void;
                preRender(): any;
                postRender(): any;
                firstRender(): any;
                connectedCallback(): void;
                ___definerClass: import("./definer.js").DefinerClass;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element | null;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                click(): void;
                addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
                removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
                readonly assignedSlot: HTMLSlotElement | null;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                id: string;
                readonly localName: string;
                readonly namespaceURI: string | null;
                onfullscreenchange: ((this: Element, ev: Event) => any) | null;
                onfullscreenerror: ((this: Element, ev: Event) => any) | null;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly prefix: string | null;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot | null;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
                closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
                closest<E_2 extends Element = Element>(selector: string): E_2 | null;
                getAttribute(qualifiedName: string): string | null;
                getAttributeNS(namespace: string | null, localName: string): string | null;
                getAttributeNames(): string[];
                getAttributeNode(name: string): Attr | null;
                getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
                getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string | null, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
                insertAdjacentHTML(where: InsertPosition, html: string): void;
                insertAdjacentText(where: InsertPosition, text: string): void;
                matches(selectors: string): boolean;
                msGetRegionContent(): any;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string | null, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions | undefined): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions | undefined): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
                scrollTo(options?: ScrollToOptions | undefined): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr | null;
                setAttributeNodeNS(attr: Attr): Attr | null;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode | null;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode | null;
                readonly nextSibling: ChildNode | null;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string | null;
                readonly parentElement: HTMLElement | null;
                readonly parentNode: (Node & ParentNode) | null;
                readonly previousSibling: ChildNode | null;
                textContent: string | null;
                appendChild<T extends Node>(newChild: T): T;
                cloneNode(deep?: boolean | undefined): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node | null): boolean;
                getRootNode(options?: GetRootNodeOptions | undefined): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
                isDefaultNamespace(namespace: string | null): boolean;
                isEqualNode(otherNode: Node | null): boolean;
                isSameNode(otherNode: Node | null): boolean;
                lookupNamespaceURI(prefix: string | null): string | null;
                lookupPrefix(namespace: string | null): string | null;
                normalize(): void;
                removeChild<T_2 extends Node>(oldChild: T_2): T_2;
                replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
                getAnimations(): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element | null;
                readonly previousElementSibling: Element | null;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element | null;
                readonly lastElementChild: Element | null;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
                querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
                querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
                querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
                querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
                querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
                oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onerror: OnErrorEventHandler;
                onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
                onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
                onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string | undefined;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions | undefined): void;
            };
            html: import("./template-fn.js").TemplateFnLike<number> | null;
            css: import("./template-fn.js").TemplateFnLike<number> | import("./template-fn.js").TemplateFnLike<number>[] | null;
            __constructedCSSChanged(_element: {
                readonly self: any & Constructor<Pick<WebComponentDefinerMixinInstance, "___definerClass"> & HTMLElement> & Pick<{
                    new (...args: any[]): {
                        ___definerClass: import("./definer.js").DefinerClass;
                        accessKey: string;
                        readonly accessKeyLabel: string;
                        autocapitalize: string;
                        dir: string;
                        draggable: boolean;
                        hidden: boolean;
                        innerText: string;
                        lang: string;
                        readonly offsetHeight: number;
                        readonly offsetLeft: number;
                        readonly offsetParent: Element | null;
                        readonly offsetTop: number;
                        readonly offsetWidth: number;
                        spellcheck: boolean;
                        title: string;
                        translate: boolean;
                        click(): void;
                        addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
                        removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
                        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
                        readonly assignedSlot: HTMLSlotElement | null;
                        readonly attributes: NamedNodeMap;
                        readonly classList: DOMTokenList;
                        className: string;
                        readonly clientHeight: number;
                        readonly clientLeft: number;
                        readonly clientTop: number;
                        readonly clientWidth: number;
                        id: string;
                        readonly localName: string;
                        readonly namespaceURI: string | null;
                        onfullscreenchange: ((this: Element, ev: Event) => any) | null;
                        onfullscreenerror: ((this: Element, ev: Event) => any) | null;
                        outerHTML: string;
                        readonly ownerDocument: Document;
                        readonly prefix: string | null;
                        readonly scrollHeight: number;
                        scrollLeft: number;
                        scrollTop: number;
                        readonly scrollWidth: number;
                        readonly shadowRoot: ShadowRoot | null;
                        slot: string;
                        readonly tagName: string;
                        attachShadow(init: ShadowRootInit): ShadowRoot;
                        closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
                        closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
                        closest<E_2 extends Element = Element>(selector: string): E_2 | null;
                        getAttribute(qualifiedName: string): string | null;
                        getAttributeNS(namespace: string | null, localName: string): string | null;
                        getAttributeNames(): string[];
                        getAttributeNode(name: string): Attr | null;
                        getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
                        getBoundingClientRect(): DOMRect;
                        getClientRects(): DOMRectList;
                        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                        getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
                        getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
                        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                        getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
                        hasAttribute(qualifiedName: string): boolean;
                        hasAttributeNS(namespace: string | null, localName: string): boolean;
                        hasAttributes(): boolean;
                        hasPointerCapture(pointerId: number): boolean;
                        insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
                        insertAdjacentHTML(where: InsertPosition, html: string): void;
                        insertAdjacentText(where: InsertPosition, text: string): void;
                        matches(selectors: string): boolean;
                        msGetRegionContent(): any;
                        releasePointerCapture(pointerId: number): void;
                        removeAttribute(qualifiedName: string): void;
                        removeAttributeNS(namespace: string | null, localName: string): void;
                        removeAttributeNode(attr: Attr): Attr;
                        requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
                        requestPointerLock(): void;
                        scroll(options?: ScrollToOptions | undefined): void;
                        scroll(x: number, y: number): void;
                        scrollBy(options?: ScrollToOptions | undefined): void;
                        scrollBy(x: number, y: number): void;
                        scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
                        scrollTo(options?: ScrollToOptions | undefined): void;
                        scrollTo(x: number, y: number): void;
                        setAttribute(qualifiedName: string, value: string): void;
                        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
                        setAttributeNode(attr: Attr): Attr | null;
                        setAttributeNodeNS(attr: Attr): Attr | null;
                        setPointerCapture(pointerId: number): void;
                        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
                        webkitMatchesSelector(selectors: string): boolean;
                        readonly baseURI: string;
                        readonly childNodes: NodeListOf<ChildNode>;
                        readonly firstChild: ChildNode | null;
                        readonly isConnected: boolean;
                        readonly lastChild: ChildNode | null;
                        readonly nextSibling: ChildNode | null;
                        readonly nodeName: string;
                        readonly nodeType: number;
                        nodeValue: string | null;
                        readonly parentElement: HTMLElement | null;
                        readonly parentNode: (Node & ParentNode) | null;
                        readonly previousSibling: ChildNode | null;
                        textContent: string | null;
                        appendChild<T extends Node>(newChild: T): T;
                        cloneNode(deep?: boolean | undefined): Node;
                        compareDocumentPosition(other: Node): number;
                        contains(other: Node | null): boolean;
                        getRootNode(options?: GetRootNodeOptions | undefined): Node;
                        hasChildNodes(): boolean;
                        insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
                        isDefaultNamespace(namespace: string | null): boolean;
                        isEqualNode(otherNode: Node | null): boolean;
                        isSameNode(otherNode: Node | null): boolean;
                        lookupNamespaceURI(prefix: string | null): string | null;
                        lookupPrefix(namespace: string | null): string | null;
                        normalize(): void;
                        removeChild<T_2 extends Node>(oldChild: T_2): T_2;
                        replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
                        readonly ATTRIBUTE_NODE: number;
                        readonly CDATA_SECTION_NODE: number;
                        readonly COMMENT_NODE: number;
                        readonly DOCUMENT_FRAGMENT_NODE: number;
                        readonly DOCUMENT_NODE: number;
                        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                        readonly DOCUMENT_POSITION_CONTAINS: number;
                        readonly DOCUMENT_POSITION_DISCONNECTED: number;
                        readonly DOCUMENT_POSITION_FOLLOWING: number;
                        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                        readonly DOCUMENT_POSITION_PRECEDING: number;
                        readonly DOCUMENT_TYPE_NODE: number;
                        readonly ELEMENT_NODE: number;
                        readonly ENTITY_NODE: number;
                        readonly ENTITY_REFERENCE_NODE: number;
                        readonly NOTATION_NODE: number;
                        readonly PROCESSING_INSTRUCTION_NODE: number;
                        readonly TEXT_NODE: number;
                        dispatchEvent(event: Event): boolean;
                        animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
                        getAnimations(): Animation[];
                        after(...nodes: (string | Node)[]): void;
                        before(...nodes: (string | Node)[]): void;
                        remove(): void;
                        replaceWith(...nodes: (string | Node)[]): void;
                        innerHTML: string;
                        readonly nextElementSibling: Element | null;
                        readonly previousElementSibling: Element | null;
                        readonly childElementCount: number;
                        readonly children: HTMLCollection;
                        readonly firstElementChild: Element | null;
                        readonly lastElementChild: Element | null;
                        append(...nodes: (string | Node)[]): void;
                        prepend(...nodes: (string | Node)[]): void;
                        querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
                        querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
                        querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
                        querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
                        querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
                        querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
                        oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                        readonly style: CSSStyleDeclaration;
                        contentEditable: string;
                        enterKeyHint: string;
                        inputMode: string;
                        readonly isContentEditable: boolean;
                        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onerror: OnErrorEventHandler;
                        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
                        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
                        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
                        autofocus: boolean;
                        readonly dataset: DOMStringMap;
                        nonce?: string | undefined;
                        tabIndex: number;
                        blur(): void;
                        focus(options?: FocusOptions | undefined): void;
                    };
                    dependencies?: {
                        define(isDevelopment?: boolean | undefined, isRoot?: boolean | undefined): void;
                    }[] | null | undefined;
                    is: string;
                    define(isDevelopment?: boolean, isRoot?: boolean): void;
                } & Constructor<HTMLElement>, "is" | "define">;
                __hasCustomCSS(): boolean;
                customCSS(): import("./template-fn.js").TemplateFnLike<number> | import("./template-fn.js").TemplateFnLike<number>[];
                readonly root: import("./base.js").ExtendedShadowRoot;
                props: any;
                readonly jsxProps: import("../classes/types.js").JSXDefinition<any, {}>;
                renderToDOM(change?: CHANGE_TYPE): void;
                preRender(): any;
                postRender(): any;
                firstRender(): any;
                connectedCallback(): void;
                ___definerClass: import("./definer.js").DefinerClass;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element | null;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                click(): void;
                addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
                removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
                readonly assignedSlot: HTMLSlotElement | null;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                id: string;
                readonly localName: string;
                readonly namespaceURI: string | null;
                onfullscreenchange: ((this: Element, ev: Event) => any) | null;
                onfullscreenerror: ((this: Element, ev: Event) => any) | null;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly prefix: string | null;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot | null;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
                closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
                closest<E_2 extends Element = Element>(selector: string): E_2 | null;
                getAttribute(qualifiedName: string): string | null;
                getAttributeNS(namespace: string | null, localName: string): string | null;
                getAttributeNames(): string[];
                getAttributeNode(name: string): Attr | null;
                getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
                getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string | null, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
                insertAdjacentHTML(where: InsertPosition, html: string): void;
                insertAdjacentText(where: InsertPosition, text: string): void;
                matches(selectors: string): boolean;
                msGetRegionContent(): any;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string | null, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions | undefined): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions | undefined): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
                scrollTo(options?: ScrollToOptions | undefined): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr | null;
                setAttributeNodeNS(attr: Attr): Attr | null;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode | null;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode | null;
                readonly nextSibling: ChildNode | null;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string | null;
                readonly parentElement: HTMLElement | null;
                readonly parentNode: (Node & ParentNode) | null;
                readonly previousSibling: ChildNode | null;
                textContent: string | null;
                appendChild<T extends Node>(newChild: T): T;
                cloneNode(deep?: boolean | undefined): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node | null): boolean;
                getRootNode(options?: GetRootNodeOptions | undefined): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
                isDefaultNamespace(namespace: string | null): boolean;
                isEqualNode(otherNode: Node | null): boolean;
                isSameNode(otherNode: Node | null): boolean;
                lookupNamespaceURI(prefix: string | null): string | null;
                lookupPrefix(namespace: string | null): string | null;
                normalize(): void;
                removeChild<T_2 extends Node>(oldChild: T_2): T_2;
                replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
                getAnimations(): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element | null;
                readonly previousElementSibling: Element | null;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element | null;
                readonly lastElementChild: Element | null;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
                querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
                querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
                querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
                querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
                querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
                oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onerror: OnErrorEventHandler;
                onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
                onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
                onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string | undefined;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions | undefined): void;
            }): boolean;
            is: string;
            define: (isDevelopment?: boolean, isRoot?: boolean) => void;
        } & Constructor<Pick<WebComponentDefinerMixinInstance, "___definerClass"> & HTMLElement> & Pick<{
            new (...args: any[]): {
                ___definerClass: import("./definer.js").DefinerClass;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element | null;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                click(): void;
                addEventListener<K_4 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_4, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_4]) => any, options?: boolean | AddEventListenerOptions | undefined): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;
                removeEventListener<K_5 extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "input" | "select" | "fullscreenchange" | "fullscreenerror" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "change" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel" | "copy" | "cut" | "paste">(type: K_5, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_5]) => any, options?: boolean | EventListenerOptions | undefined): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;
                readonly assignedSlot: HTMLSlotElement | null;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                id: string;
                readonly localName: string;
                readonly namespaceURI: string | null;
                onfullscreenchange: ((this: Element, ev: Event) => any) | null;
                onfullscreenerror: ((this: Element, ev: Event) => any) | null;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly prefix: string | null;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot | null;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_6 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selector: K_6): HTMLElementTagNameMap[K_6] | null;
                closest<K_7 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selector: K_7): SVGElementTagNameMap[K_7] | null;
                closest<E_2 extends Element = Element>(selector: string): E_2 | null;
                getAttribute(qualifiedName: string): string | null;
                getAttributeNS(namespace: string | null, localName: string): string | null;
                getAttributeNames(): string[];
                getAttributeNode(name: string): Attr | null;
                getAttributeNodeNS(namespaceURI: string, localName: string): Attr | null;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_8 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(qualifiedName: K_8): HTMLCollectionOf<HTMLElementTagNameMap[K_8]>;
                getElementsByTagName<K_9 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(qualifiedName: K_9): HTMLCollectionOf<SVGElementTagNameMap[K_9]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string | null, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(position: InsertPosition, insertedElement: Element): Element | null;
                insertAdjacentHTML(where: InsertPosition, html: string): void;
                insertAdjacentText(where: InsertPosition, text: string): void;
                matches(selectors: string): boolean;
                msGetRegionContent(): any;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string | null, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions | undefined): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions | undefined): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions | undefined): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;
                scrollTo(options?: ScrollToOptions | undefined): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr | null;
                setAttributeNodeNS(attr: Attr): Attr | null;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode | null;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode | null;
                readonly nextSibling: ChildNode | null;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string | null;
                readonly parentElement: HTMLElement | null;
                readonly parentNode: (Node & ParentNode) | null;
                readonly previousSibling: ChildNode | null;
                textContent: string | null;
                appendChild<T extends Node>(newChild: T): T;
                cloneNode(deep?: boolean | undefined): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node | null): boolean;
                getRootNode(options?: GetRootNodeOptions | undefined): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(newChild: T_1, refChild: Node | null): T_1;
                isDefaultNamespace(namespace: string | null): boolean;
                isEqualNode(otherNode: Node | null): boolean;
                isSameNode(otherNode: Node | null): boolean;
                lookupNamespaceURI(prefix: string | null): string | null;
                lookupPrefix(namespace: string | null): string | null;
                normalize(): void;
                removeChild<T_2 extends Node>(oldChild: T_2): T_2;
                replaceChild<T_3 extends Node>(newChild: Node, oldChild: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;
                getAnimations(): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element | null;
                readonly previousElementSibling: Element | null;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element | null;
                readonly lastElementChild: Element | null;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_10 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_10): HTMLElementTagNameMap[K_10] | null;
                querySelector<K_11 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_11): SVGElementTagNameMap[K_11] | null;
                querySelector<E_3 extends Element = Element>(selectors: string): E_3 | null;
                querySelectorAll<K_12 extends "object" | "link" | "small" | "sub" | "sup" | "track" | "progress" | "a" | "abbr" | "address" | "applet" | "area" | "article" | "aside" | "audio" | "b" | "base" | "basefont" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "button" | "canvas" | "caption" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "dir" | "div" | "dl" | "dt" | "em" | "embed" | "fieldset" | "figcaption" | "figure" | "font" | "footer" | "form" | "frame" | "frameset" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "label" | "legend" | "li" | "main" | "map" | "mark" | "marquee" | "menu" | "meta" | "meter" | "nav" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "pre" | "q" | "rp" | "rt" | "ruby" | "s" | "samp" | "script" | "section" | "select" | "slot" | "source" | "span" | "strong" | "style" | "summary" | "table" | "tbody" | "td" | "template" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "var" | "video" | "wbr">(selectors: K_12): NodeListOf<HTMLElementTagNameMap[K_12]>;
                querySelectorAll<K_13 extends "symbol" | "a" | "script" | "style" | "title" | "circle" | "clipPath" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "filter" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "marker" | "mask" | "metadata" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "svg" | "switch" | "text" | "textPath" | "tspan" | "use" | "view">(selectors: K_13): NodeListOf<SVGElementTagNameMap[K_13]>;
                querySelectorAll<E_4 extends Element = Element>(selectors: string): NodeListOf<E_4>;
                oncopy: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                oncut: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                onpaste: ((this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any) | null;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
                onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragexit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
                ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onerror: OnErrorEventHandler;
                onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
                ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
                onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
                onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
                onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any) | null;
                onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
                onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
                onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsubmit: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
                ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
                onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
                onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string | undefined;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions | undefined): void;
            };
            dependencies?: {
                define(isDevelopment?: boolean | undefined, isRoot?: boolean | undefined): void;
            }[] | null | undefined;
            is: string;
            define(isDevelopment?: boolean, isRoot?: boolean): void;
        } & Constructor<HTMLElement>, "is" | "define">;
        renderToDOM: (change?: CHANGE_TYPE) => void;
        listen: <EV extends string | number>(event: EV, listener: (...args: import("./listener.js").EventListenerObj[EV]["args"]) => import("./listener.js").EventListenerObj[EV]["returnType"], once?: boolean) => void;
    };
} & P;
//# sourceMappingURL=component.d.ts.map